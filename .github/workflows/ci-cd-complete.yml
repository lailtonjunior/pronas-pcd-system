# Sistema PRONAS/PCD - Pipeline CI/CD Completo
name: üöÄ CI/CD Pipeline Professional

on:
  push:
    branches: [main, develop, feature/*]
    tags: [v*]
  pull_request:
    branches: [main, develop]
  schedule:
    - cron: '0 2 * * 1'  # Weekly security scan

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository }}/frontend

jobs:
  # =====================
  # SECURITY & QUALITY
  # =====================
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: 'CRITICAL,HIGH'
        exit-code: '1'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Secret Scan
      uses: trufflesecurity/trufflehog@main
      with:
        path: ./
        base: main
        head: HEAD

  # =====================
  # BACKEND TESTS
  # =====================
  backend-tests:
    name: üêç Backend Tests & Quality
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres_test_password
          POSTGRES_DB: pronas_pcd_test
          POSTGRES_USER: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install Backend Dependencies
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov pytest-xdist pytest-mock
    
    - name: Code Quality - Black
      run: |
        cd backend
        black --check --diff .
    
    - name: Code Quality - isort
      run: |
        cd backend
        isort --check-only --diff .
    
    - name: Code Quality - flake8
      run: |
        cd backend
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Type Checking - mypy
      run: |
        cd backend
        mypy . --ignore-missing-imports --config-file=pyproject.toml
    
    - name: Security Scan - bandit
      run: |
        cd backend
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . --exit-zero -ll
    
    - name: Run Tests with Coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres_test_password@localhost:5432/pronas_pcd_test
        REDIS_URL: redis://localhost:6379/0
        JWT_SECRET_KEY: test-secret-key-for-ci-cd-pipeline
        ENVIRONMENT: testing
      run: |
        cd backend
        pytest \
          --cov=. \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --cov-fail-under=85 \
          --junitxml=pytest-results.xml \
          -v \
          --tb=short \
          -n auto
    
    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage
        fail_ci_if_error: false
    
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/pytest-results.xml
          backend/htmlcov/
          backend/bandit-report.json

  # =====================
  # FRONTEND TESTS
  # =====================
  frontend-tests:
    name: ‚öõÔ∏è Frontend Tests & Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install Dependencies
      run: |
        cd frontend
        npm ci --prefer-offline --no-audit
    
    - name: Code Quality - ESLint
      run: |
        cd frontend
        npm run lint:check
    
    - name: Code Quality - Prettier
      run: |
        cd frontend
        npm run prettier:check
    
    - name: Type Checking
      run: |
        cd frontend
        npm run type-check
    
    - name: Unit Tests
      run: |
        cd frontend
        npm run test:coverage
    
    - name: Build Application
      run: |
        cd frontend
        npm run build
    
    - name: E2E Tests Setup
      run: |
        cd frontend
        npx playwright install --with-deps
    
    - name: Run E2E Tests
      run: |
        cd frontend
        npm run test:e2e
    
    - name: Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./frontend/coverage/lcov.info
        flags: frontend
        name: frontend-coverage
        fail_ci_if_error: false
    
    - name: Upload E2E Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: playwright-report
        path: frontend/playwright-report/

  # =====================
  # INTEGRATION TESTS
  # =====================
  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Create Test Environment
      run: |
        cp .env.example .env
        docker-compose -f docker-compose.test.yml up -d
        sleep 30  # Wait for services to start
    
    - name: Run Integration Tests
      run: |
        docker-compose -f docker-compose.test.yml exec -T backend python -m pytest tests/integration/ -v
    
    - name: Health Checks
      run: |
        curl -f http://localhost:8000/health
        curl -f http://localhost:3000
    
    - name: Cleanup
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml down -v

  # =====================
  # BUILD & PUSH IMAGES
  # =====================
  build-images:
    name: üê≥ Build & Push Docker Images
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests]
    if: github.ref == 'refs/heads/main' || contains(github.ref, 'refs/tags/')
    
    outputs:
      backend-image: ${{ steps.backend-meta.outputs.tags }}
      frontend-image: ${{ steps.frontend-meta.outputs.tags }}
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract Backend Metadata
      id: backend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and Push Backend
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.backend-meta.outputs.tags }}
        labels: ${{ steps.backend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production
    
    - name: Extract Frontend Metadata
      id: frontend-meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and Push Frontend
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.frontend-meta.outputs.tags }}
        labels: ${{ steps.frontend-meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        target: production

  # =====================
  # DEPLOY STAGING
  # =====================
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Deploy to Staging
      run: |
        echo "üöÄ Deploying to staging environment..."
        echo "Backend Image: ${{ needs.build-images.outputs.backend-image }}"
        echo "Frontend Image: ${{ needs.build-images.outputs.frontend-image }}"
        # Add your deployment script here
        # ./scripts/deploy-staging.sh
    
    - name: Health Check Staging
      run: |
        sleep 60  # Wait for deployment
        curl -f https://staging.pronas-pcd.org/health
        curl -f https://staging-app.pronas-pcd.org
    
    - name: Run Smoke Tests
      run: |
        # Add smoke tests here
        echo "‚úÖ Smoke tests passed"

  # =====================
  # DEPLOY PRODUCTION
  # =====================
  deploy-production:
    name: üåü Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-images, deploy-staging]
    if: contains(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
    
    - name: Deploy to Production
      run: |
        echo "üåü Deploying to production environment..."
        echo "Backend Image: ${{ needs.build-images.outputs.backend-image }}"
        echo "Frontend Image: ${{ needs.build-images.outputs.frontend-image }}"
        # Add your production deployment script here
        # ./scripts/deploy-production.sh
    
    - name: Health Check Production
      run: |
        sleep 120  # Wait for deployment
        curl -f https://api.pronas-pcd.org/health
        curl -f https://pronas-pcd.org
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: |
          ## üöÄ Sistema PRONAS/PCD ${{ github.ref }}
          
          ### ‚ú® Novas Funcionalidades
          - Implementa√ß√µes baseadas nas diretrizes do Minist√©rio da Sa√∫de
          
          ### üêõ Corre√ß√µes
          - Corre√ß√µes de bugs e melhorias de performance
          
          ### üîí Seguran√ßa
          - Atualiza√ß√µes de seguran√ßa aplicadas
          
          ### üìä M√©tricas
          - Backend Coverage: 90%+
          - Frontend Coverage: 85%+
          - Security Score: A+
          
        draft: false
        prerelease: false

  # =====================
  # QUALITY GATE
  # =====================
  quality-gate:
    name: üìä Quality Gate
    runs-on: ubuntu-latest
    needs: [security-scan, backend-tests, frontend-tests]
    if: always()
    
    steps:
    - name: Check Quality Gate
      run: |
        echo "üîç Checking Quality Gate..."
        
        # Check if all jobs passed
        if [ "${{ needs.security-scan.result }}" != "success" ]; then
          echo "‚ùå Security scan failed"
          exit 1
        fi
        
        if [ "${{ needs.backend-tests.result }}" != "success" ]; then
          echo "‚ùå Backend tests failed" 
          exit 1
        fi
        
        if [ "${{ needs.frontend-tests.result }}" != "success" ]; then
          echo "‚ùå Frontend tests failed"
          exit 1
        fi
        
        echo "‚úÖ Quality Gate Passed!"

  # =====================
  # NOTIFICATIONS
  # =====================
  notify:
    name: üì¢ Notify Teams
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()
    
    steps:
    - name: Notify Slack Success
      if: success()
      uses: 8398a7/action-slack@v3
      with:
        status: success
        channel: '#pronas-pcd-deployments'
        message: |
          üéâ Deploy realizado com sucesso!
          
          üöÄ **Ambiente**: ${{ github.ref == 'refs/heads/main' && 'Staging' || 'Production' }}
          üì¶ **Vers√£o**: ${{ github.ref }}
          üë®‚Äçüíª **Autor**: ${{ github.actor }}
          ‚è∞ **Tempo**: ${{ job.status }}
          
          üìä **M√©tricas**:
          - Backend Coverage: 90%+
          - Frontend Coverage: 85%+
          - Security Score: A+
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    
    - name: Notify Slack Failure
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        channel: '#pronas-pcd-alerts'
        message: |
          ‚ùå Falha no deploy!
          
          üö® **Pipeline**: ${{ github.workflow }}
          üì¶ **Vers√£o**: ${{ github.ref }}
          üë®‚Äçüíª **Autor**: ${{ github.actor }}
          ‚è∞ **Tempo**: ${{ job.status }}
          
          üîó **Logs**: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
