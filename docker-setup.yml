# docker-compose.yml - Docker Compose for PRONAS/PCD System
version: '3.8'

services:
  # ==================== DATABASE ====================
  postgres:
    image: postgres:15-alpine
    container_name: pronas_postgres
    environment:
      POSTGRES_DB: pronas_pcd_db
      POSTGRES_USER: pronas_user
      POSTGRES_PASSWORD: pronas_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - pronas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U pronas_user -d pronas_pcd_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== REDIS ====================
  redis:
    image: redis:7-alpine
    container_name: pronas_redis
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - pronas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== MINIO (S3 Storage) ====================
  minio:
    image: minio/minio:latest
    container_name: pronas_minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - pronas_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3

  # ==================== BACKEND API ====================
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
      target: development
    container_name: pronas_backend
    environment:
      - DATABASE_URL=postgresql://pronas_user:pronas_password@postgres:5432/pronas_pcd_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - S3_ENDPOINT=http://minio:9000
      - ENVIRONMENT=development
      - DEBUG=true
    volumes:
      - ./backend:/app
      - ./uploads:/app/uploads
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - pronas_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==================== FRONTEND ====================
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: development
    container_name: pronas_frontend
    environment:
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXTAUTH_URL=http://localhost:3000
      - NODE_ENV=development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    networks:
      - pronas_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ==================== NGINX (Reverse Proxy) ====================
  nginx:
    image: nginx:alpine
    container_name: pronas_nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - pronas_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped

  # ==================== MONITORING ====================
  prometheus:
    image: prom/prometheus:latest
    container_name: pronas_prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - pronas_network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: pronas_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - pronas_network
    depends_on:
      - prometheus
    restart: unless-stopped

  # ==================== BACKUP SERVICE ====================
  backup:
    build:
      context: .
      dockerfile: Dockerfile.backup
    container_name: pronas_backup
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=pronas_pcd_db
      - POSTGRES_USER=pronas_user
      - POSTGRES_PASSWORD=pronas_password
      - S3_ENDPOINT=http://minio:9000
      - BACKUP_SCHEDULE=0 2 * * *
    volumes:
      - backup_data:/backups
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - pronas_network
    depends_on:
      - postgres
      - minio
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  minio_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  backup_data:
    driver: local

networks:
  pronas_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16


---

# Dockerfile.backend - Backend FastAPI Container
FROM python:3.11-slim as base

# Configurar timezone para Brazil
ENV TZ=America/Sao_Paulo
RUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Instalar dependências do sistema
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libpq-dev \
    curl \
    vim \
    && rm -rf /var/lib/apt/lists/*

# Definir diretório de trabalho
WORKDIR /app

# Copiar requirements e instalar dependências Python
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Criar usuário não-root
RUN useradd --create-home --shell /bin/bash pronas
RUN chown -R pronas:pronas /app
USER pronas

# Development stage
FROM base as development

# Copiar código da aplicação
COPY --chown=pronas:pronas . .

# Criar diretórios necessários
RUN mkdir -p uploads logs

# Expor porta
EXPOSE 8000

# Comando para desenvolvimento
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]

# Production stage
FROM base as production

# Copiar código da aplicação
COPY --chown=pronas:pronas . .

# Criar diretórios necessários
RUN mkdir -p uploads logs

# Expor porta
EXPOSE 8000

# Comando para produção
CMD ["gunicorn", "main:app", "-w", "4", "-k", "uvicorn.workers.UvicornWorker", "--bind", "0.0.0.0:8000"]


---

# requirements.txt - Python Dependencies
# FastAPI e dependências principais
fastapi==0.104.1
uvicorn[standard]==0.24.0
gunicorn==21.2.0
pydantic[email]==2.5.0
python-multipart==0.0.6

# Banco de dados
sqlalchemy==2.0.23
alembic==1.12.1
psycopg2-binary==2.9.9

# Autenticação e segurança
python-jose[cryptography]==3.3.0
passlib[bcrypt]==1.7.4
python-oauth2==1.1.1

# Cache e sessões
redis==5.0.1
hiredis==2.2.3

# IA e Machine Learning
torch==2.1.0
transformers==4.35.0
scikit-learn==1.3.2
spacy==3.7.2
nltk==3.8.1
pandas==2.1.3
numpy==1.24.4

# OCR e processamento de documentos  
pytesseract==0.3.10
Pillow==10.0.1
pdf2image==1.16.3
PyPDF2==3.0.1

# Utilitários
python-dotenv==1.0.0
requests==2.31.0
httpx==0.25.2
aiofiles==23.2.1
python-slugify==8.0.1
validators==0.22.0

# Monitoramento e logging
prometheus-client==0.18.0
structlog==23.2.0
sentry-sdk[fastapi]==1.38.0

# Testes
pytest==7.4.3
pytest-asyncio==0.21.1
pytest-cov==4.1.0
httpx==0.25.2
factory-boy==3.3.0

# Desenvolvimento
black==23.11.0
isort==5.12.0
flake8==6.1.0
mypy==1.7.0
pre-commit==3.5.0

# Produção
python-json-logger==2.0.7
colorlog==6.7.0


---

# Dockerfile.frontend - Frontend Next.js Container
FROM node:18-alpine AS base

# Install dependencies only when needed
FROM base AS deps
RUN apk add --no-cache libc6-compat
WORKDIR /app

# Install dependencies
COPY package.json package-lock.json* ./
RUN npm ci --only=production

FROM base AS development
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

# Create non-root user
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs
RUN chown -R nextjs:nodejs /app
USER nextjs

EXPOSE 3000
ENV PORT 3000
ENV HOSTNAME localhost

CMD ["npm", "run", "dev"]

FROM base AS builder
WORKDIR /app
COPY --from=deps /app/node_modules ./node_modules
COPY . .

ENV NEXT_TELEMETRY_DISABLED 1

RUN npm run build

FROM base AS production
WORKDIR /app

ENV NODE_ENV production
ENV NEXT_TELEMETRY_DISABLED 1

RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy built application
COPY --from=builder --chown=nextjs:nodejs /app/.next ./.next
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/package.json ./package.json

USER nextjs

EXPOSE 3000

ENV PORT 3000
ENV HOSTNAME localhost

CMD ["npm", "start"]


---

# nginx.conf - Nginx Configuration
events {
    worker_connections 1024;
}

http {
    upstream backend {
        server backend:8000;
    }
    
    upstream frontend {
        server frontend:3000;
    }
    
    server {
        listen 80;
        server_name localhost;
        
        # Frontend routes
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_cache_bypass $http_upgrade;
        }
        
        # API routes
        location /api/ {
            proxy_pass http://backend/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Static files
        location /uploads/ {
            alias /app/uploads/;
            expires 1d;
            add_header Cache-Control "public, no-transform";
        }
        
        # Health check
        location /health {
            proxy_pass http://backend/health;
        }
        
        # Security headers
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains";
    }
}


---

# Dockerfile.backup - Backup Service
FROM alpine:latest

RUN apk add --no-cache \
    postgresql-client \
    aws-cli \
    curl \
    bash \
    dcron \
    && rm -rf /var/cache/apk/*

WORKDIR /scripts

COPY backup-scripts/ .
RUN chmod +x *.sh

# Setup cron
RUN echo "0 2 * * * /scripts/backup.sh" > /etc/crontabs/root

CMD ["crond", "-f", "-l", "2"]


---

# backup-scripts/backup.sh - Backup Script
#!/bin/bash
set -e

TIMESTAMP=$(date +%Y%m%d_%H%M%S)
BACKUP_DIR="/backups"
DB_BACKUP_FILE="$BACKUP_DIR/postgres_backup_$TIMESTAMP.sql.gz"

# Create backup directory
mkdir -p $BACKUP_DIR

echo "Starting backup at $(date)"

# PostgreSQL backup
echo "Backing up PostgreSQL database..."
pg_dump -h $POSTGRES_HOST -U $POSTGRES_USER -d $POSTGRES_DB | gzip > $DB_BACKUP_FILE

# Upload to S3/MinIO
echo "Uploading backup to S3..."
aws s3 cp $DB_BACKUP_FILE s3://pronas-backups/ --endpoint-url $S3_ENDPOINT

# Cleanup old backups (keep last 30 days)
find $BACKUP_DIR -name "postgres_backup_*.sql.gz" -mtime +30 -delete

echo "Backup completed at $(date)"


---

# monitoring/prometheus.yml - Prometheus Configuration
global:
  scrape_interval: 15s
  evaluation_interval: 15s

rule_files:
  # - "first_rules.yml"

scrape_configs:
  - job_name: 'prometheus'
    static_configs:
      - targets: ['localhost:9090']

  - job_name: 'pronas-backend'
    static_configs:
      - targets: ['backend:8000']
    metrics_path: '/metrics'

  - job_name: 'postgres'
    static_configs:
      - targets: ['postgres:5432']

  - job_name: 'redis'
    static_configs:
      - targets: ['redis:6379']


---

# init-db/01-init.sql - Database Initialization
-- Criação de extensões PostgreSQL necessárias
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pg_trgm";
CREATE EXTENSION IF NOT EXISTS "unaccent";

-- Configurações de locale para português brasileiro
SET lc_messages TO 'pt_BR.UTF-8';
SET lc_monetary TO 'pt_BR.UTF-8';
SET lc_numeric TO 'pt_BR.UTF-8';
SET lc_time TO 'pt_BR.UTF-8';

-- Criar schema específico se necessário
CREATE SCHEMA IF NOT EXISTS pronas;

-- Comentários sobre o banco
COMMENT ON DATABASE pronas_pcd_db IS 'Banco de dados do Sistema PRONAS/PCD - Programa Nacional de Apoio à Atenção da Saúde da Pessoa com Deficiência';


---

# Makefile - Development Commands
.PHONY: help build up down restart logs shell test clean

# Default target
help:
	@echo "PRONAS/PCD System - Available commands:"
	@echo "  build     - Build all containers"
	@echo "  up        - Start all services"
	@echo "  down      - Stop all services"
	@echo "  restart   - Restart all services"
	@echo "  logs      - Show logs"
	@echo "  shell     - Open shell in backend container"
	@echo "  test      - Run tests"
	@echo "  clean     - Clean up containers and volumes"

build:
	docker-compose build

up:
	docker-compose up -d

down:
	docker-compose down

restart:
	docker-compose restart

logs:
	docker-compose logs -f

shell:
	docker-compose exec backend bash

test:
	docker-compose exec backend python -m pytest

clean:
	docker-compose down -v
	docker system prune -f