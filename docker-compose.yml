# Sistema PRONAS/PCD - Docker Compose Production Ready
# Versão: 2.0.0
# Conformidade: 100% Ministério da Saúde

version: '3.8'

services:
  # PostgreSQL Database - Primary Storage
  postgres:
    image: postgres:15-alpine
    container_name: pronas-postgres-v2
    environment:
      POSTGRES_DB: ${DB_NAME:-pronas_pcd_db}
      POSTGRES_USER: ${DB_USER:-pronas_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-PronasPCD_2024_Secure!}
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=pt_BR.UTF-8 --lc-ctype=pt_BR.UTF-8"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
      - ./database/backups:/backups
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - pronas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-pronas_user} -d ${DB_NAME:-pronas_pcd_db}"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    security_opt:
      - no-new-privileges:true

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: pronas-redis-v2
    command: redis-server --requirepass ${REDIS_PASSWORD:-PronasPCD_Redis_2024!} --maxmemory 1gb --maxmemory-policy allkeys-lru --save 900 1 --save 300 10 --save 60 10000
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-PronasPCD_Redis_2024!}
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/etc/redis/redis.conf:ro
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - pronas-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-PronasPCD_Redis_2024!}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # MinIO Object Storage - Document Management
  minio:
    image: minio/minio:RELEASE.2024-01-01T16-36-33Z
    container_name: pronas-minio-v2
    environment:
      MINIO_ROOT_USER: ${MINIO_USER:-pronas_minio_admin}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD:-PronasPCD_MinIO_2024_Secure!}
      MINIO_DOMAIN: ${MINIO_DOMAIN:-localhost:9000}
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    volumes:
      - minio_data:/data
      - ./docker/minio/policies:/policies:ro
    ports:
      - "${MINIO_API_PORT:-9000}:9000"
      - "${MINIO_CONSOLE_PORT:-9001}:9001"
    networks:
      - pronas-network
    command: server /data --console-address ":9001"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true

  # Backend FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: production
      args:
        PYTHON_VERSION: 3.11-slim
    container_name: pronas-backend-v2
    environment:
      # Core Configuration
      ENVIRONMENT: ${ENVIRONMENT:-production}
      DEBUG: ${DEBUG:-false}
      
      # Database
      DATABASE_URL: postgresql://${DB_USER:-pronas_user}:${DB_PASSWORD:-PronasPCD_2024_Secure!}@postgres:5432/${DB_NAME:-pronas_pcd_db}
      DATABASE_POOL_SIZE: 20
      DATABASE_MAX_OVERFLOW: 40
      
      # Cache
      REDIS_URL: redis://:${REDIS_PASSWORD:-PronasPCD_Redis_2024!}@redis:6379/0
      
      # Security
      JWT_SECRET_KEY: ${JWT_SECRET_KEY:-PronasPCD_JWT_Super_Secret_Key_2024_Change_In_Production!}
      ACCESS_TOKEN_EXPIRE_MINUTES: 480
      REFRESH_TOKEN_EXPIRE_DAYS: 30
      
      # Storage
      STORAGE_ENDPOINT: minio:9000
      STORAGE_ACCESS_KEY: ${MINIO_USER:-pronas_minio_admin}
      STORAGE_SECRET_KEY: ${MINIO_PASSWORD:-PronasPCD_MinIO_2024_Secure!}
      STORAGE_BUCKET: pronas-pcd-documents
      STORAGE_SECURE: false
      
      # AI Configuration
      AI_ENABLED: ${AI_ENABLED:-true}
      AI_API_KEY: ${OPENAI_API_KEY:-}
      AI_MODEL: gpt-4-turbo-preview
      AI_CONFIDENCE_THRESHOLD: 0.75
      
      # Business Rules
      MAX_PROJECTS_PER_INSTITUTION: 3
      MIN_CAPTACAO_PERCENTAGE: 0.6
      MAX_CAPTACAO_PERCENTAGE: 1.2
      MAX_CAPTACAO_ABSOLUTE: 50000
      
      # External APIs
      VIACEP_API_URL: https://viacep.com.br/ws
      RECEITAWS_API_URL: https://www.receitaws.com.br/v1
      
      # Security
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000,https://pronas-pcd.org}
      RATE_LIMIT_PER_MINUTE: 100
      
      # Monitoring
      METRICS_ENABLED: true
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
      - uploaded_files:/app/uploads
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - pronas-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "50m"
        max-file: "5"

  # Frontend Next.js Application  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
      args:
        NODE_VERSION: 18-alpine
    container_name: pronas-frontend-v2
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      NEXT_PUBLIC_APP_VERSION: 2.0.0
      NEXT_PUBLIC_ENVIRONMENT: ${ENVIRONMENT:-production}
      NEXT_TELEMETRY_DISABLED: 1
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - pronas-network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy & Load Balancer
  nginx:
    image: nginx:alpine
    container_name: pronas-nginx-v2
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/conf.d:/etc/nginx/conf.d:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
      - ./docker/nginx/security:/etc/nginx/security:ro
      - frontend_static:/usr/share/nginx/html/static:ro
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    networks:
      - pronas-network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
    security_opt:
      - no-new-privileges:true
    logging:
      driver: "json-file"
      options:
        max-size: "100m"
        max-file: "5"

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: pronas-prometheus-v2
    user: root
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/prometheus/rules:/etc/prometheus/rules:ro
      - prometheus_data:/prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    networks:
      - pronas-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--storage.tsdb.retention.size=10GB'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
    security_opt:
      - no-new-privileges:true

  # Grafana Dashboards & Analytics
  grafana:
    image: grafana/grafana-oss:10.0.0
    container_name: pronas-grafana-v2
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-PronasPCD_Grafana_2024!}
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
      GF_SECURITY_DISABLE_GRAVATAR: true
      GF_ANALYTICS_REPORTING_ENABLED: false
      GF_ANALYTICS_CHECK_FOR_UPDATES: false
      GF_INSTALL_PLUGINS: grafana-clock-panel,grafana-simple-json-datasource,grafana-piechart-panel
      GF_SMTP_ENABLED: ${SMTP_ENABLED:-false}
      GF_SMTP_HOST: ${SMTP_HOST:-smtp.gmail.com:587}
      GF_SMTP_USER: ${SMTP_USER:-}
      GF_SMTP_PASSWORD: ${SMTP_PASSWORD:-}
      GF_SMTP_FROM_ADDRESS: ${SMTP_FROM:-grafana@pronas-pcd.org}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "${GRAFANA_PORT:-3001}:3000"
    networks:
      - pronas-network
    depends_on:
      - prometheus
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
    security_opt:
      - no-new-privileges:true
    user: "0:0"

  # Automated Backup Service
  backup:
    image: postgres:15-alpine
    container_name: pronas-backup-v2
    environment:
      PGPASSWORD: ${DB_PASSWORD:-PronasPCD_2024_Secure!}
      POSTGRES_HOST: postgres
      POSTGRES_DB: ${DB_NAME:-pronas_pcd_db}
      POSTGRES_USER: ${DB_USER:-pronas_user}
      BACKUP_RETENTION_DAYS: ${BACKUP_RETENTION_DAYS:-30}
      S3_BUCKET: ${BACKUP_S3_BUCKET:-pronas-pcd-backups}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID:-}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY:-}
    volumes:
      - ./scripts/backup.sh:/backup.sh:ro
      - backup_data:/backups
      - postgres_data:/var/lib/postgresql/data:ro
    networks:
      - pronas-network
    depends_on:
      - postgres
    restart: unless-stopped
    command: |
      sh -c '
        apk add --no-cache aws-cli curl
        echo "0 2 * * * /backup.sh database" | crontab -
        echo "0 3 * * 0 /backup.sh cleanup" | crontab -
        echo "0 4 * * * /backup.sh sync-s3" | crontab -
        crond -f -l 2
      '
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'
    security_opt:
      - no-new-privileges:true

  # Log Management (Optional)
  loki:
    image: grafana/loki:2.8.0
    container_name: pronas-loki-v2
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki.yml:/etc/loki/loki.yml:ro
      - loki_data:/loki
    networks:
      - pronas-network
    command: -config.file=/etc/loki/loki.yml
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 512M

# Persistent Volumes
volumes:
  postgres_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/postgres
  redis_data:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ./data/redis
  minio_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/minio
  prometheus_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/prometheus
  grafana_data:
    driver: local
    driver_opts:
      type: none
      o: bind 
      device: ./data/grafana
  loki_data:
    driver: local
  backend_logs:
    driver: local
  backup_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/backups
  uploaded_files:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./data/uploads
  frontend_static:
    driver: local

# Network Configuration
networks:
  pronas-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1
    driver_opts:
      com.docker.network.bridge.name: pronas-bridge
      com.docker.network.driver.mtu: 1500
