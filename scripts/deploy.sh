#!/bin/bash
# deploy-production.sh - Script de Deploy Automatizado para Produ√ß√£o

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}   PRONAS/PCD - Deploy de Produ√ß√£o     ${NC}"
echo -e "${GREEN}========================================${NC}"

# Verificar vari√°veis de ambiente
if [ ! -f .env.production ]; then
    echo -e "${RED}‚ùå Arquivo .env.production n√£o encontrado!${NC}"
    exit 1
fi

# Carregar vari√°veis
source .env.production

# Validar configura√ß√µes cr√≠ticas
echo -e "${YELLOW}üìã Validando configura√ß√µes...${NC}"

if [ "$JWT_SECRET_KEY" == "CHANGE_ME" ]; then
    echo -e "${RED}‚ùå JWT_SECRET_KEY n√£o foi alterado!${NC}"
    exit 1
fi

if [ "$DB_PASSWORD" == "CHANGE_ME" ]; then
    echo -e "${RED}‚ùå DB_PASSWORD n√£o foi alterado!${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ Configura√ß√µes validadas${NC}"

# Backup do banco atual (se existir)
echo -e "${YELLOW}üíæ Realizando backup do banco de dados...${NC}"
docker-compose -f docker-compose.production.yml exec -T postgres-primary \
    pg_dump -U $DB_USER $DB_NAME | gzip > backups/backup_$(date +%Y%m%d_%H%M%S).sql.gz

# Pull das imagens mais recentes
echo -e "${YELLOW}üê≥ Atualizando imagens Docker...${NC}"
docker-compose -f docker-compose.production.yml pull

# Build das aplica√ß√µes
echo -e "${YELLOW}üî® Construindo aplica√ß√µes...${NC}"
docker-compose -f docker-compose.production.yml build --no-cache

# Parar servi√ßos antigos
echo -e "${YELLOW}‚èπÔ∏è  Parando servi√ßos antigos...${NC}"
docker-compose -f docker-compose.production.yml down

# Limpar volumes √≥rf√£os
echo -e "${YELLOW}üßπ Limpando volumes √≥rf√£os...${NC}"
docker volume prune -f

# Iniciar banco de dados primeiro
echo -e "${YELLOW}üóÑÔ∏è  Iniciando banco de dados...${NC}"
docker-compose -f docker-compose.production.yml up -d postgres-primary postgres-replica
sleep 30

# Executar migrations
echo -e "${YELLOW}üìù Executando migrations...${NC}"
docker-compose -f docker-compose.production.yml run --rm backend-1 \
    alembic upgrade head

# Iniciar Redis
echo -e "${YELLOW}üì¶ Iniciando cache Redis...${NC}"
docker-compose -f docker-compose.production.yml up -d redis-master redis-slave
sleep 10

# Iniciar aplica√ß√µes
echo -e "${YELLOW}üöÄ Iniciando aplica√ß√µes...${NC}"
docker-compose -f docker-compose.production.yml up -d

# Aguardar servi√ßos estarem prontos
echo -e "${YELLOW}‚è≥ Aguardando servi√ßos...${NC}"
sleep 30

# Verificar sa√∫de dos servi√ßos
echo -e "${YELLOW}üè• Verificando sa√∫de dos servi√ßos...${NC}"

# Backend health check
BACKEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://api.pronas-pcd.org/health)
if [ "$BACKEND_HEALTH" == "200" ]; then
    echo -e "${GREEN}‚úÖ Backend: Saud√°vel${NC}"
else
    echo -e "${RED}‚ùå Backend: Problema detectado (HTTP $BACKEND_HEALTH)${NC}"
fi

# Frontend health check
FRONTEND_HEALTH=$(curl -s -o /dev/null -w "%{http_code}" https://pronas-pcd.org)
if [ "$FRONTEND_HEALTH" == "200" ]; then
    echo -e "${GREEN}‚úÖ Frontend: Saud√°vel${NC}"
else
    echo -e "${RED}‚ùå Frontend: Problema detectado (HTTP $FRONTEND_HEALTH)${NC}"
fi

# Limpar cache CDN (se aplic√°vel)
echo -e "${YELLOW}üåê Limpando cache CDN...${NC}"
# cloudflare-cli purge-cache --zone=$CLOUDFLARE_ZONE

# Notificar equipe
echo -e "${YELLOW}üìß Notificando equipe...${NC}"
curl -X POST $SLACK_WEBHOOK_URL \
    -H 'Content-Type: application/json' \
    -d "{\"text\":\"‚úÖ Deploy PRONAS/PCD conclu√≠do com sucesso! Vers√£o: $VERSION\"}"

echo -e "${GREEN}========================================${NC}"
echo -e "${GREEN}   ‚úÖ Deploy conclu√≠do com sucesso!    ${NC}"
echo -e "${GREEN}========================================${NC}"

# Mostrar logs
echo -e "${YELLOW}üìú Logs dos servi√ßos:${NC}"
docker-compose -f docker-compose.production.yml logs --tail=50